#####################################################################################
# Prog:
# Finalidade comunicasao serial com um segundo software sendo executado no arduino
# Autor: Thiago Elias dos Santos
# Criado:     27/04/2023
# Atualizado: 14/05/2023
# Referencias:
# 1 - https://www.youtube.com/playlist?list=PLtcOfE9KWB66LgOjZyJstFAMV7Yywh3K7
######################################################################################

#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.1
#  in conjunction with Tcl version 8.6
#    May 13, 2023 10:13:48 PM -03  platform: Windows NT

import sys
from tkinter import *
from time import sleep
import threading
import serial
import serial.tools.list_ports
comunicacao = serial.Serial()
top = Tk()

Porta = "COMx"
TaxaBits = "9600"
Msg = "Escolha a porta e a velocidade de comunicação"
CorMsg = "#009000"
ProcurandoPortas = True


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

#import regulador_support

######################################################################################
#_____________________________________Funções________________________________________#

def f_procurando_portas():
    global ProcurandoPortas
    while True:
        sleep(3)
        if ProcurandoPortas:
            textoMsg['text'] ="Procurando por portas ..."
            textoMsg['foreground'] = "#009000"
            portas = serial.tools.list_ports.comports(include_links=False)
            ComboboxPorta['values'] = ""
            i =0
            for porta in sorted(portas):
                ComboboxPorta['values'] = (*ComboboxPorta['values'], porta.device) #porta.device
                i= i+1
                ProcurandoPortas = False
                textoMsg['text'] ="Lista atualizada selecione uma porta."
                textoMsg['foreground'] = "#009000"
                #print(porta.device)


def okBt1():
    global Porta
    Porta = ComboboxPorta.get()
    print(Porta)
    #Porta = ComboboxVelocidade.get(ANCHOR)
    #textoPortaAtual["text"] = Porta
    #textoMenssagem["text"]="Porta: "+Porta+" Velocidade: "+TaxaBits
    
def okBt2():
    global TaxaBits
    TaxaBits = ComboboxVelocidade.get()
    print(TaxaBits)
    #textoVelocidadeAtual["text"] = TaxaBits
    #textoMenssagem["text"]="Porta: "+Porta+" Velocidade: "+TaxaBits


def fbtAtualizar():
    global ProcurandoPortas
    ProcurandoPortas = True

def tensaoPersonalizada(fonte, tensao):
    if not comunicacao.is_open:
        textoMsg['text'] ="Primeiro conecte a um dispositivo"
        textoMsg['foreground'] = "#900000"

    else:
        v = round(tensao,3)
        msg = "A0000F"
        vv =int(v * 1000) 
        print(v)
        #textoMenssagem["text"]="Tensão atualizada para:"+str(v)+" V"
        textoMsg['text'] ="Tensão atualizada para: "+str(v)+" V"
        textoMsg['foreground'] = "#000090"
        if v == 0 :
            textoMsg['text'] ="Saida desligada"
            textoMsg['foreground'] = "#000090"
        elif v>=0.1 and v<1:
            msg =fonte +"00"+str(vv)+"F"
        elif v >= 1 and v <10:
            msg =fonte +"0"+str(vv)+"F"
        elif v>=10 and v<65:
            msg =fonte +str(vv)+"F"
        else:
            textoMsg['text'] ="Erro tensão não aceita"
            textoMsg['foreground'] = "#900000"

        comunicacao.write(bytes(msg, 'ascii'))
        #print(msg)
        print(bytes(msg, 'ascii'))


def iniciarComunicacao():
    okBt1()
    okBt2()
    global comunicacao, Porta, TaxaBits

    if not comunicacao.is_open:
        try:
            comunicacao = serial.Serial(port=Porta, baudrate=TaxaBits)
            textoMsg['text'] ="Comunicação Iniciada!"
            textoMsg['foreground'] = "#000090"
        except IOError:
            comunicacao.close()
            textoMsg['text'] ="Erro ao iniciar Comunicação!"
            textoMsg['foreground'] = "#900000"
    else:
        textoMsg['text'] ="A comunicação já foi iniciada."
        textoMsg['foreground'] = "#009000"

def desligarComunicacao():
    global comunicacao
    comunicacao.close()
    textoMsg['text'] ="Comunicação Encerrada!"
    textoMsg['foreground'] = "#000090"

def esta_aberta():
    global comunicacao
    return comunicacao.is_open()

def escrever_byte(byte):
    if comunicacao.is_open:
        comunicacao.write((byte,))

def ler_linha():
    return comunicacao.readline()

def resetar_buffer_de_entrada():
    if comunicacao.is_open:
        comunicacao.reset_input_buffer()



#######################################################################################
##########################################################################################

# Tread para lista de portas
procurando_portas = threading.Thread(target=f_procurando_portas)
procurando_portas.daemon = True
procurando_portas.start()
###########################################################################################


top.geometry("652x232+245+98")
top.minsize(116, 1)
top.maxsize(2962, 1272)
top.resizable(1, 1)
top.title("New Toplevel")
top.configure(background="#d9d9d9")
top.configure(highlightbackground="#d9d9d9")
top.configure(highlightcolor="black")

textoPorta = tk.Label(top)
textoPorta.place(relx=0.031, rely=0.043, height=21, width=74)
textoPorta.configure(activebackground="#f9f9f9")
textoPorta.configure(activeforeground="black")
textoPorta.configure(background="#d9d9d9")
textoPorta.configure(disabledforeground="#a3a3a3")
textoPorta.configure(foreground="#000000")
textoPorta.configure(highlightbackground="#d9d9d9")
textoPorta.configure(highlightcolor="black")
textoPorta.configure(text='''Porta''')

ComboboxPorta = ttk.Combobox(top)
ComboboxPorta.place(relx=0.015, rely=0.129, relheight=0.091
                , relwidth=0.158)
ComboboxPorta.configure(textvariable=Porta)
ComboboxPorta.insert(1," ")
ComboboxPorta.configure(takefocus="")
ComboboxPorta.configure(justify=CENTER)

textoVelocidade = tk.Label(top)
textoVelocidade.place(relx=0.031, rely=0.259, height=21, width=74)
textoVelocidade.configure(activebackground="#f9f9f9")
textoVelocidade.configure(activeforeground="black")
textoVelocidade.configure(background="#d9d9d9")
textoVelocidade.configure(disabledforeground="#a3a3a3")
textoVelocidade.configure(foreground="#000000")
textoVelocidade.configure(highlightbackground="#d9d9d9")
textoVelocidade.configure(highlightcolor="black")
textoVelocidade.configure(text='''Velocidade''')

ComboboxVelocidade = ttk.Combobox(top)
ComboboxVelocidade.place(relx=0.015, rely=0.345, relheight=0.091
                , relwidth=0.158)
ComboboxVelocidade.configure(textvariable=TaxaBits)
ComboboxVelocidade['values']=("300","600","1200","2400","9600","19200","38400","57200","128000","256000")
ComboboxVelocidade.configure(takefocus="")
ComboboxVelocidade.configure(justify=CENTER)

bt3v3 = ttk.Button(top)
bt3v3.place(relx=0.23, rely=0.086, height=45, width=76)
bt3v3.configure(takefocus="")
bt3v3.configure(text='''3.3V''')
bt3v3.configure(command=lambda: tensaoPersonalizada("A", 3.3))    # o comando lambda faz com que o comando seja executado 
                                                            # somete quando aperto o botao

bt5v = ttk.Button(top)
bt5v.place(relx=0.353, rely=0.086, height=45, width=76)
bt5v.configure(takefocus="")
bt5v.configure(text='''5V''')
bt5v.configure(command=lambda: tensaoPersonalizada("A", 5))

bt9v = ttk.Button(top)
bt9v.place(relx=0.475, rely=0.086, height=45, width=76)
bt9v.configure(takefocus="")
bt9v.configure(text='''9V''')
bt9v.configure(command=lambda: tensaoPersonalizada("A", 9))

bt12v = ttk.Button(top)
bt12v.place(relx=0.23, rely=0.302, height=45, width=76)
bt12v.configure(takefocus="")
bt12v.configure(text='''12V''')
bt12v.configure(command=lambda: tensaoPersonalizada("A", 12))

bt19v = ttk.Button(top)
bt19v.place(relx=0.353, rely=0.302, height=45, width=76)
bt19v.configure(takefocus="")
bt19v.configure(text='''19V''')
bt19v.configure(command=lambda: tensaoPersonalizada("A", 19))

bt24v = ttk.Button(top)
bt24v.place(relx=0.475, rely=0.302, height=45, width=76)
bt24v.configure(takefocus="")
bt24v.configure(text='''24V''')
bt24v.configure(command=lambda: tensaoPersonalizada("A", 24))

btAtualizar = ttk.Button(top)
btAtualizar.place(relx=0.015, rely=0.474, height=25, width=106)
btAtualizar.configure(takefocus="")
btAtualizar.configure(text='''Atualizar Portas''')
btAtualizar.configure(command=fbtAtualizar)

btDesconectar = ttk.Button(top)
btDesconectar.place(relx=0.015, rely=0.819, height=25, width=106)
btDesconectar.configure(takefocus="")
btDesconectar.configure(text='''Desconectar''')
btDesconectar.configure(command=desligarComunicacao)

btConectar = ttk.Button(top)
btConectar.place(relx=0.015, rely=0.69, height=25, width=106)
btConectar.configure(takefocus="")
btConectar.configure(text='''Conectar''')
btConectar.configure(command=iniciarComunicacao)

textoMsg = ttk.Label(top)
textoMsg.place(relx=0.225, rely=0.862, height=19, width=470)
textoMsg.configure(background="#d9d9d9")
textoMsg.configure(foreground=CorMsg)
textoMsg.configure(font="TkDefaultFont")
textoMsg.configure(relief="flat")
textoMsg.configure(anchor='w')
textoMsg.configure(justify='center')
#textoMsg.configure(textvariable=Msg)
textoMsg.configure(text=Msg)

Scale1 = tk.Scale(top, from_=0.0, to=30.0)
Scale1.place(relx=0.23, rely=0.517, relwidth=0.362, relheight=0.0
                , height=40, bordermode='ignore')
Scale1.configure(activebackground="#ececec")
Scale1.configure(background="#d9d9d9")
Scale1.configure(foreground="#000000")
Scale1.configure(highlightbackground="#d9d9d9")
Scale1.configure(highlightcolor="black")
Scale1.configure(orient="horizontal")
Scale1.configure(resolution="0.1")
Scale1.configure(troughcolor="#d9d9d9")
#Scale1.configure(variable=regulador_support.ten)

btAlterar = ttk.Button(top)
btAlterar.place(relx=0.23, rely=0.69, height=25, width=236)
btAlterar.configure(takefocus="")
btAlterar.configure(text='''Alterar''')
btAlterar.configure(command= lambda: tensaoPersonalizada("A", Scale1.get()))
print(Scale1.get())

bt3v3_1 = ttk.Button(top)
bt3v3_1.place(relx=0.629, rely=0.086, height=45, width=76)
bt3v3_1.configure(takefocus="")
bt3v3_1.configure(text='''3.3V''')
bt3v3_1.configure(command=lambda: tensaoPersonalizada("B", 3.3))

bt5v_1 = ttk.Button(top)
bt5v_1.place(relx=0.752, rely=0.086, height=45, width=76)
bt5v_1.configure(takefocus="")
bt5v_1.configure(text='''5V''')
bt5v_1.configure(command=lambda: tensaoPersonalizada("B", 5))

bt9v_1 = ttk.Button(top)
bt9v_1.place(relx=0.874, rely=0.086, height=45, width=76)
bt9v_1.configure(takefocus="")
bt9v_1.configure(text='''9V''')
bt9v_1.configure(command=lambda: tensaoPersonalizada("B", 9))

bt12v_1 = ttk.Button(top)
bt12v_1.place(relx=0.629, rely=0.302, height=45, width=76)
bt12v_1.configure(takefocus="")
bt12v_1.configure(text='''12V''')
bt12v_1.configure(command=lambda: tensaoPersonalizada("B", 12))

bt19v_1 = ttk.Button(top)
bt19v_1.place(relx=0.752, rely=0.302, height=45, width=76)
bt19v_1.configure(takefocus="")
bt19v_1.configure(text='''19V''')
bt19v_1.configure(command=lambda: tensaoPersonalizada("B", 19))

bt24v_1 = ttk.Button(top)
bt24v_1.place(relx=0.874, rely=0.302, height=45, width=76)
bt24v_1.configure(takefocus="")
bt24v_1.configure(text='''24V''')
bt24v_1.configure(command=lambda: tensaoPersonalizada("B", 24))

Scale2 = tk.Scale(top, from_=0.0, to= 16.0)
Scale2.place(relx=0.629, rely=0.517, relwidth=0.362, relheight=0.0
                , height=40, bordermode='ignore')
Scale2.configure(activebackground="#ececec")
Scale2.configure(background="#d9d9d9")
Scale2.configure(foreground="#000000")
Scale2.configure(highlightbackground="#d9d9d9")
Scale2.configure(highlightcolor="black")
Scale2.configure(orient="horizontal")
Scale2.configure(resolution="0.1")
Scale2.configure(troughcolor="#d9d9d9")
#Scale2.configure(variable=regulador_support.ten)

btAlterar_1 = ttk.Button(top)
btAlterar_1.place(relx=0.629, rely=0.69, height=25, width=236)
btAlterar_1.configure(takefocus="")
btAlterar_1.configure(text='''Alterar''')
btAlterar_1.configure(command= lambda: tensaoPersonalizada("B", Scale2.get()))
print(Scale2.get())



top.mainloop()


